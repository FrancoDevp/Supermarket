// Constantes
const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';

// Tipos
interface Product {
  id?: string;
  name: string;
  price: number;
  date: string;
  category?: string;
}

// Obtener todos los productos
export async function fetchProducts() {
  try {
    {{#if useFirebase}}
    // Si usamos Firebase, usamos las funciones de firebase-utils.ts
    const { getProducts } = await import('./firebase-utils');
    return getProducts();
    {{else}}
    const response = await fetch(`${API_URL}/api/items`);
    
    if (!response.ok) {
      throw new Error('Error al obtener productos');
    }
    
    const data = await response.json();
    return data.items || [];
    {{/if}}
  } catch (error) {
    console.error('Error en fetchProducts:', error);
    return [];
  }
}

// Obtener productos por fecha
export async function fetchProductsByDate(date: string) {
  try {
    {{#if useFirebase}}
    // Si usamos Firebase, usamos las funciones de firebase-utils.ts
    const { getProductsByDate } = await import('./firebase-utils');
    return getProductsByDate(date);
    {{else}}
    const response = await fetch(`${API_URL}/api/items?date=${date}`);
    
    if (!response.ok) {
      throw new Error('Error al obtener productos por fecha');
    }
    
    const data = await response.json();
    return data.items || [];
    {{/if}}
  } catch (error) {
    console.error('Error en fetchProductsByDate:', error);
    return [];
  }
}

// Agregar un producto
export async function addProduct(product: Omit<Product, 'id'>) {
  try {
    {{#if useFirebase}}
    // Si usamos Firebase, usamos las funciones de firebase-utils.ts
    const { addProduct: addFirebaseProduct } = await import('./firebase-utils');
    const id = await addFirebaseProduct(product);
    return { ...product, id };
    {{else}}
    const response = await fetch(`${API_URL}/api/items`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(product),
    });
    
    if (!response.ok) {
      throw new Error('Error al agregar producto');
    }
    
    const data = await response.json();
    return data.item;
    {{/if}}
  } catch (error) {
    console.error('Error en addProduct:', error);
    throw error;
  }
}

// Eliminar un producto
export async function deleteProduct(id: string) {
  try {
    {{#if useFirebase}}
    // Si usamos Firebase, usamos las funciones de firebase-utils.ts
    const { deleteProduct: deleteFirebaseProduct } = await import('./firebase-utils');
    await deleteFirebaseProduct(id);
    return true;
    {{else}}
    const response = await fetch(`${API_URL}/api/items/${id}`, {
      method: 'DELETE',
    });
    
    if (!response.ok) {
      throw new Error('Error al eliminar producto');
    }
    
    return true;
    {{/if}}
  } catch (error) {
    console.error('Error en deleteProduct:', error);
    throw error;
  }
}

